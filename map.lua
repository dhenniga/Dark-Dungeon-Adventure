--map
tiledat = "00000000160001001600241004000500051004100a002c0025000900080025102b000b002b002c002b002c002b00360037002c008e008f000f000f10a400a5000000000010001100341012101400150015101410250119001a003c003b001b00180025113b00260027003c003b003c003b003c009e009f001f001f10b400b500020003002b002c0003100210140115011511141129002a00080009002b002c000a002c002b000b00860087008800890082008300ae00af00a000a100a100a200120013003b003c0013101210040105010511041139003c003b003c00180019001a003c003b001b009600970098009900920093003b003c00b000b100b100b200120034011101100134111210110128002800110138010100010038010600070035003500080009000800251025000800ae00af00bf002c008a008b008c008d002401160101011601160124110101380038000101280110001000280117101700b300b3001800190018002511250118001a003c003b003c009a009b009c009d00b300b3000000000000000000000000000000000000000000b3003a00171017001710b300120013001310121001001600ae00af00a000a100a100a100a100a200b300b3000000000000000000000000000000000000000000b300b300171017001710b30023102210221023008e008f003b001b00b000b100b100b100b100b200240016000600350035000700b30017000000000000000000110120002100211020101101000032103200000000000000000000000000000083108210a000a200120034001710b300b3001700b30017000000000000000000160130000000000030101601000032113201000000000000000000000000000093109210b000b20000000000000000000000000000000000000000000000000016003001000000003011160023112211221123012f002f002f002f003f002f002f003f000800080000000000000000000000000000000000000000000000000011002001210121112011111012001301131112102f003f002f002f002f002f003f002f003f002b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080008002f002f002f000a100a002f002b003f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002f002f00080108012f000a100a002f0008010801000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025000800080025100a002f002f000a100a002b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a002f002f000a1025010801080125110a003f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f000c002f002f000c102f002f003f003f000a1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002f002f000c113f002f003f002f000c012b000a
decoded_tiles={}

--

function decode_tiles()
 for num=0,128 do
  local sx,sy=num%16,flr(num/16)
  local tile={}
  for i=0,1 do
   for j=0,1 do
    local s=(shl(sx,3)+shl(i,2))+(shl(sy,8)+shl(j,7))
    local sp=tonum("0x"..sub(tiledat,1+s,2+s))
    local hf=sub(tiledat,3+s,3+s)=="1"
    local vf=sub(tiledat,4+s,4+s)=="1"
    add(tile,{sp=sp,x_offset=i*8,y_offset=j*8,hf=hf,vf=vf})
   end
  end
  decoded_tiles[num]=tile
 end
end

--

function spr_ex(tile,x,y)
 for t in all(tile) do
  spr(t.sp,x+t.x_offset,y+t.y_offset,1,1,t.hf,t.vf)
 end
end

--

function map_ex(atx,aty,m_x,m_y)
 local start_x,start_y=m_x,m_y
 local end_x,end_y=m_x+8,m_y+8
 for map_x=start_x,end_x-1 do
  for map_y=start_y,end_y-1 do
   local s=mget(map_x,map_y)
   local tile=decoded_tiles[s]
   if tile then
    spr_ex(tile,shl(map_x-m_x,4)+atx,shl(map_y-m_y,4)+aty)
   end
  end
 end
end

--

function update_map()
	local new_mapx,new_mapy=band(p.x,0xFFFFFF80),band(p.y,0xFFFFFF80)
	if new_mapx~=mapx or new_mapy~=mapy then
	 mapx,mapy=new_mapx,new_mapy
	end

	local offset=0
	local time_val=flr(time()*0.1)
	if (quake) offset=(16-rnd(512))*0.001
	poke(0x5f2c,zoom_view and 3 or 0)
	camera(
		(zoom_view and (p.x-29+offset) or (mapx+offset*time_val)),
		(zoom_view and (p.y-31+offset) or (mapy+offset*time_val))
	)
end 

function draw_map()
 map_ex(mapx,mapy,shr(mapx,4),shr(mapy,4))
end

--

function door_lights(x,y,fx,fy,flp)
	local flames_anim=flp and {240,241,241,240} or {224,225,225,224}
	local frame_index=flr(time()*(4*t_increment)%4)+1
	local flip=frame_index>2

	if flp then
			spr(flames_anim[frame_index],x+4,y-12,1,1,fx,flip)
			spr(flames_anim[frame_index],x+4,y+20,1,1,fx,flip)
	else
			spr(flames_anim[frame_index],x-12,y+4,1,1,flip,fy)
			spr(flames_anim[frame_index],x+20,y+4,1,1,flip,fy)
	end
end

--

function darkroom()
	memcpy(0xa000,0,0x2000)
	memcpy(0x0,0x6000,0x2000)
	poke(0x5f55,0x0)
	fillp(rnd({▒,░,…}))
	rectfill(mapx,mapy,mapx+128,mapy+128,0)
	draw_torch_light()
	draw_character_light()
	if (raindrops) draw_rain()
	poke(0x5f55,0x60)
	pal({1,0,1,0,1,0,0,1,1,1,1,1,0,0,0,0})
	if zoom_view then
		sspr(0,0,64,64,p.x-29,p.y-31)
	else
		sspr(0,0,128,128,mapx,mapy)
	end
	pal(0)	
	palt(14,true)
	palt(0,false)
	memcpy(0,0xa000,0x2000)
end




r = {}

function init_rain()
	for i=1,100 do
		r[i]={x=rnd(256)-128,y=rnd(128),v=1+flr(rnd(2))}
	end
end

function update_rain()
	for raindrop in all(r) do
		local speed_factor=3/raindrop.v*t_increment
		raindrop.x+=speed_factor
		raindrop.y+=speed_factor
		
		if raindrop.y>=134 then
			raindrop.x,
			raindrop.y,
			raindrop.v=rnd(256)-127,-6,1+flr(rnd(2))
		end
	end
end

function draw_rain()
	for raindrop in all(r) do
		local length = raindrop.v==1 and 2 or 1
		local color=12-11*(raindrop.v-1)
		line(
			mapx+raindrop.x,
			mapy+raindrop.y,
			mapx+raindrop.x-length,
			mapy+raindrop.y-length,
			color
		)
    end
end